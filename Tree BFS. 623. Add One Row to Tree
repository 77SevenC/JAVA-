/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
       if(d == 1){
           TreeNode newRoot = new TreeNode(v);
           newRoot.left = root;
           return newRoot;
       } 
        //BFS, 
        Queue<TreeNode> q = new ArrayDeque<>();
        q.offer(root);
        int level = 1; //level  +1 = d
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i <size; i++){
                TreeNode cur = q.poll();
                if(level + 1 == d){
                    TreeNode left = new TreeNode(v);
                    TreeNode right = new TreeNode(v);//node
                    left.left = cur.left;
                    right.right = cur.right;
                    cur.left = left;
                    cur.right = right;
                }
                if(cur.left != null){
                    q.offer(cur.left);
                }
                 if(cur.right != null){
                    q.offer(cur.right);
                }
            }
            level++;
        }      
      return root;  
    }
}

// 1. BFS, time O(n) space O(n)
// 2. depth, int size = q.size(); for()
// 3. nodes connections, edges
